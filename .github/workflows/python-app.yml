# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "develop", "master" ]

env:
  LIBRARY_BASE_PATH: "Y:\\Music"
  MUSIC_PATH: Y:\\Music

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
        cache: "pip"
    - name: Load cached Poetry installation
      uses: actions/cache@v3
      with:
        path: ~/.local  # the path depends on the OS
        key: poetry-0  # increment to reset cache
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --with dev
    - name: Lint
      run: |
        poetry run flake8
        poetry run autoflake -r --remove-all-unused-imports --remove-unused-variables .
        poetry run isort . -c
    - name: Test
      run: |
        poetry run pytest
    - name: Test optionals
      env:
        LASTFM_KEY: ${{ secrets.LASTFM_KEY }}
        LASTFM_SECRET: ${{ secrets.LASTFM_SECRET }}
      if: github.ref == 'refs/heads/master'
      run: |
        poetry run pytest -m lastfm

  docker:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event == 'push'
    needs: "build"
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags:
            mrrikkert/pymusic:latest
            mrrikkert/pymusic:${{ env.GITHUB_SHA }}
